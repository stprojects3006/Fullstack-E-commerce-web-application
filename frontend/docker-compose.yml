version: '3.8'

services:
  # Service Registry
  service-registry:
    build: ./microservice-backend/service-registry
    ports:
      - "8761:8761"
    networks:
      - ecommerce-network

  # API Gateway
  api-gateway:
    build: ./microservice-backend/api-gateway
    ports:
      - "8081:8081"
    depends_on:
      - service-registry
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - ecommerce-network

  # Auth Service
  auth-service:
    build: ./microservice-backend/auth-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/auth_db
    networks:
      - ecommerce-network

  # User Service
  user-service:
    build: ./microservice-backend/user-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/user_db
    networks:
      - ecommerce-network

  # Product Service
  product-service:
    build: ./microservice-backend/product-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/product_db
    networks:
      - ecommerce-network

  # Category Service
  category-service:
    build: ./microservice-backend/category-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/category_db
    networks:
      - ecommerce-network

  # Cart Service
  cart-service:
    build: ./microservice-backend/cart-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/cart_db
    networks:
      - ecommerce-network

  # Order Service
  order-service:
    build: ./microservice-backend/order-service
    depends_on:
      - service-registry
      - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/order_db
    networks:
      - ecommerce-network

  # Notification Service
  notification-service:
    build: ./microservice-backend/notification-service
    depends_on:
      - service-registry
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - ecommerce-network

  # MongoDB
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce-network

  # Frontend with Nginx
  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - ecommerce-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ecommerce-network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ecommerce-network

  # Blackbox Exporter
  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    ports:
      - "9115:9115"
    volumes:
      - ./blackbox.yml:/config/blackbox.yml:ro
    command:
      - '--config.file=/config/blackbox.yml'
    networks:
      - ecommerce-network

  # Promtail
  promtail:
    image: grafana/promtail:latest
    ports:
      - "9080:9080"
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command:
      - '-config.file=/etc/promtail/config.yml'
    networks:
      - ecommerce-network

  # Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    command:
      - '-config.file=/etc/loki/local-config.yaml'
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  ecommerce-network:
    driver: bridge 